$#include "Defines.h"

$#include "CharacterBase.h" 
$#include "Core/Hero.hpp"
$#include "Element.h"

$#include "GameScene.h"

$#include "BGLayer.h"
$#include "CreditsLayer.h"
$#include "GameLayer.h"
$#include "GearLayer.h"
$#include "GameOver.h"
$#include "HudLayer.h"
$#include "JoyStick.h"
$#include "LoadLayer.h"
$#include "PauseLayer.h"
$#include "SelectLayer.h"
$#include "StartMenu.h"

$#include "ActionButton.h"
$#include "Effect.h"
$#include "HPBar.h"

$#include "Core/Provider.hpp"

/* Defines.h */
enum abType
{
	NAttack,
	Item1,
	GearItem,
	GearBtn,
	SKILL1,
	SKILL2,
	SKILL3,
	OUGIS1,
	OUGIS2
};

enum gearType
{
	gear00,
	gear01,
	gear02,
	gear03,
	gear04,
	gear05,
	gear06,
	gear07,
	gear08,
	None
};


/* ------- UI Layer ------- */

/* GameScene.h */
class GameScene : public CCScene
{
public:
    static GameScene* create();
};

/* StartMenu.h */
class StartMenu : public CCLayer{
public:
	static StartMenu* create();

	void enterCustomMode();

	void setHandle(LUA_FUNCTION handler);
};

/* Effect.h */
class Effect : public CCSprite{
public:
	Effect();
	~Effect();

	virtual bool init(const char *szImage, CCObject* Attacker);

	static Effect* create(const char *szImage, CCObject* Attacker);

//	CharacterBase* at;

// private:
// 	void removeEffect();
// 	void removeFontEffect();
// 	CCAction* createEffectAnimation(const char* file, int frameCount, float fps, bool isRepeat);
// 	CCAction* createFontAnimation();
};

/* HPBar.h */
class HPBar : public CCSprite{
	// HPBar();
	// ~HPBar();
public:
	static HPBar *create(const char *szImage);

//	protected: CharacterBase * _delegate;public: virtual CharacterBase * getDelegate();
	// virtual bool init(const char *szImage);
	// void changeBar(const char *szImage);
	// void loseHP(float percent);
//	private: CCSprite * hpBottom;
	public: virtual CCSprite* getHPBottom();
//	private: CCSprite * hpBar;
	public: virtual CCSprite* getHPBAR();
};

/* LoadLayer.h */
class LoadLayer : public CCLayer{
public:
	LoadLayer();
	~LoadLayer();

//	CCArray* tempHeros;
	bool init();

//	int loadNum;

	static LoadLayer* create();

//	private: GameLayer* _gameLayer;
	public: virtual GameLayer* getGameLayer();
	public: virtual void setGameLayer(GameLayer* var);
//	private: BGLayer* _bgLayer;
	public: virtual BGLayer* getBGLayer();
	public: virtual void setBGLayer(BGLayer* var);
//	private: HudLayer* _hudLayer;
	public: virtual HudLayer* getHudLayer();
	public: virtual void setHudLayer(HudLayer* var);
//	bool _isHardCoreMode;
//	bool _isRandomChar;

	void preloadAudio();
	void preloadIMG();
	void playBGM(float dt);
	void onLoadFinish(float dt);

// private:
	// 	void preloadPlist(CCObject* obj);

// protected:
//	void onEnter();
//	void onExit();
};

/* SelectLayer.h */
class SelectLayer : public CCLayer
{
public:
	static SelectLayer *create();

	void setSelectHero(const char *var);
	void setCom1Select(const char *var);
	void setCom2Select(const char *var);

	void setSelectList(CCArray *var);

	void onGameStart();
};

/* KTools.h */
class KTools : public CCObject{
public:
	static void prepareFileMD5();
	static void prepareFileSHA();

	static bool readXMLToArray(const char *filePath, CCArray *array);
	static void prepareFileOGG(const char *listName, bool unload = false);

	static void initTableInDB();
	static void initColumeInDB();

	static sqlite3 *prepareTableInDB();

	static bool checkData();
	static void updateData();
	static bool saveToSQLite(const char *table = "GameRecord", const char *column = NULL, const char *value = NULL, bool isBuy = false);
	static CCString *readFromSQLite(const char *table = "GameRecord", const char *column = NULL, const char *value = NULL);

	static void encode(std::string &str, int randomKey);
	static void decode(std::string &str);
	static int checkMD5(std::string findPath = "");

	static void dfsFolder(std::string folderPath, int depth = 0, int type = 0);

	static bool checkPackage();

	static std::string getKeycode(std::string path);

	static CCString *readSQLite(const char *table, const char *column, const char *value, const char *targetColumn);
	static void saveSQLite(const char *table, const char *relatedColumn, const char *value, const char *targetColumn, char *targetValue, bool isPlus);

	static std::string encodeData(std::string data);
};

/* CCTips.h */
class CCTips : public CCSprite{
public:
	static CCTips *create(const char *tips);
};

/** CCClippingNode.h */
class CCClippingNode : public CCNode
{
public:
    static CCClippingNode* create();
    static CCClippingNode* create(CCNode *pStencil);

    virtual ~CCClippingNode();

    virtual bool init();
    virtual bool init(CCNode *pStencil);
    virtual void onEnter();
    virtual void onEnterTransitionDidFinish();
    virtual void onExitTransitionDidStart();

    virtual void onExit();
    virtual void visit();

    CCNode* getStencil() const;
    void setStencil(CCNode *pStencil);

    GLfloat getAlphaThreshold() const;
    void setAlphaThreshold(GLfloat fAlphaThreshold);

    bool isInverted() const;
    void setInverted(bool bInverted);
};
