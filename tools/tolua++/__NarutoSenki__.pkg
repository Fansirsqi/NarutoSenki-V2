$#include "Defines.h"

$#include "CharacterBase.h" 
$#include "Characters.h"
$#include "Element.h"

$#include "GameScene.h"

$#include "BGLayer.h"
$#include "CreditsLayer.h"
$#include "GameLayer.h"
$#include "GearLayer.h"
$#include "GameOver.h"
$#include "HudLayer.h"
$#include "JoyStick.h"
$#include "LoadLayer.h"
$#include "NetworkLayer.h"
$#include "PauseLayer.h"
$#include "RankingLayer.h"
$#include "SelectLayer.h"
$#include "SkillLayer.h"
$#include "StartMenu.h"

$#include "ActionButton.h"
$#include "Effect.h"
$#include "HPBar.h"

$#include "AI/__AI__.hpp"

/* Defines.h */
enum abType
{
	NAttack,
	Item1,
	GearItem,
	GearBtn,
	SKILL1,
	SKILL2,
	SKILL3,
	OUGIS1,
	OUGIS2
};

enum gearType
{
	gear00,
	gear01,
	gear02,
	gear03,
	gear04,
	gear05,
	gear06,
	gear07,
	gear08,
	None
};

/*
#define Akatsuki 	"Akatsuki"
#define Konoha 		"Konoha" */


/* ------- Character Layer ------- */


/* CharacterBase.h */
typedef enum{
	DEAD,
	IDLE,
	WALK,
	ATTACK,
	SATTACK,
	OATTACK,
	O2ATTACK,
	HURT,
	ABHURT,
	KOCKDOWN,
	FLOAT,
	JUMP,
	AIRHURT
} State;

class CharacterBase :public CCSprite{
public:
	CharacterBase();
	~CharacterBase();

	virtual void setID(CCString* character, CCString* role, CCString *group);
	virtual void setHPbar();
	virtual void changeHPbar();
	virtual void setShadows();
//	unsigned int _deadNum;
//	unsigned int _flogNum;
//	private: CCString* _killNum;
	public: virtual CCString* getKillNum();
	public: virtual void setKillNum(CCString* var);

//	private: CCString* _coin;
	public: virtual CCString* getCoin();
	public: virtual void setCoin(CCString* var);

//	CCObject* _slayer;
//	CCObject* _sticker;

//	CharacterBase* _mainTarget;

//	bool isHurtingTower;

//	bool _isFlipped;
//	bool _isHitOne;
//	bool _isCatchOne;
//	bool _isHealling;
//	bool _isVisable;

//	protected: unsigned int _charNO;
	public: virtual unsigned int getCharNO();
	public: virtual  void setCharNO(unsigned int var);

//	unsigned int _healBuffValue;
//	unsigned int _dehealBuffValue;
//	unsigned int _powerUPBuffValue;
//	unsigned int _skillUPBuffValue;
//	unsigned int _skillChangeBuffValue;

//	CCSprite* _heartEffect;
//	Effect* _healBuffEffect;
//	Effect* _powerBuffEffect;
//	Effect* _skillBuffEffect;
//	CCSprite* _dehealBuffEffect;
//	Effect* _healItemEffect;
//	Effect* _speedItemEffect;
//	float _buffStartTime;
//	float _debuffStartTime;
//	protected: int _knockLength;
	public: virtual int getKnockLength();
	public: virtual  void setKnockLength(int var);
//	protected: bool _knockDiretion;
	public: virtual bool getKnockDiretion();
	public: virtual  void setKnockDiretion(bool var);
//	bool _isAllAttackLocked;
//	bool _isOnlySkillLocked;
//	bool _isWudi;
//	bool _isTaunt;
//	bool _isBati;
//	bool _isSuicide;

//	bool _isSticking;

//	bool _isPausing;

// 	CCPoint _markPoint;
// 	CCPoint _startPoint;

//	bool _isAI;
//	bool _isControled;

//	private: CCLabelTTF* cpLabel;
	public: virtual CCLabelTTF* getCPLabel();
	public: virtual void setCPLabel(CCLabelTTF* var);

//	private: CCString* _role;
	public: virtual CCString* getRole();
	public: virtual void setRole(CCString* var);
//	private: CCString* _group;
	public: virtual CCString* getGroup();
	public: virtual void setGroup(CCString* var);
//	private: CCString* _character;
	public: virtual CCString* getCharacter();
	public: virtual void setCharacter(CCString* var);
//	private: CCArray* _gearArray;
	public: virtual CCArray* getGearArray();
	public: virtual void setGearArray(CCArray* var);

// 	ninjaEnums _id;

//	int rebornLabelTime;
//	int battleCondiction;
//	bool isBaseDanger;

//	HPBar* _hpBar;
//	CCSprite* _shadow;
//	float _originY;
//	float _backY;
//	float _DiretionY;

//	int lostBloodValue;
//	int gearCKRValue;
//	int gearRecoverValue;

//	unsigned int hearts;
//	unsigned int bamen;
//	bool isAttackGainCKR;
//	bool isPofang;
//	bool isHujia;
//	bool isGearCD;

//	bool _isCanGear00;
//	bool _isCanGear03;
//	bool _isCanGear06;

//	protected: int _walkSpeed;
	public: virtual int getWalkSpeed();
	public: virtual  void setWalkSpeed(int var);
//	int _originSpeed;

//	private: CCString* _maxHP;
	public: virtual CCString* getMaxHP();
	public: virtual void setMaxHP(CCString* var);
//	private: CCString* _hp;
	public: virtual CCString* getHP();
	public: virtual void setHP(CCString* var);

//	private: CCString* _ckr;
	public: virtual CCString* getCKR();
	public: virtual void setCKR(CCString* var);
//	private: CCString* _ckr2;
	public: virtual CCString* getCKR2();
	public: virtual void setCKR2(CCString* var);
//	protected: float _gardValue;
	public: virtual float getGP();
	public: virtual  void setGP(float var);
//	protected: float _exp;
	public: virtual float getEXP();
	public: virtual  void setEXP(float var);
//	protected: unsigned int _level;
	public: virtual unsigned int getLV();
	public: virtual  void setLV(unsigned int var);
//	protected: int _height;
	public: virtual int getHeight();
	public: virtual  void setHeight(int var);
//	protected: unsigned int _rebornTime;
	public: virtual unsigned int getRebornTime();
	public: virtual  void setRebornTime(unsigned int var);

//	protected: CCPoint _spawnPoint;
	public: virtual CCPoint getSpawnPoint();
	public: virtual  void setSpawnPoint(CCPoint var);

//	protected: HeroElement* _master;
	public: virtual HeroElement* getMaster();
	public: virtual  void setMaster(HeroElement* var);
//	protected: CharacterBase* _controler;
	public: virtual CharacterBase* getControler();
	public: virtual  void setControler(CharacterBase* var);
//	protected: CharacterBase* _secmaster;
	public: virtual CharacterBase* getSecMaster();
	public: virtual  void setSecMaster(CharacterBase* var);

//	private: CCString* _nattackValue;
	public: virtual CCString* getnAttackValue();
	public: virtual void setnAttackValue(CCString* var);

//	protected: CCString* _nattackType;
	public: virtual CCString* getnAttackType();
	public: virtual  void setnAttackType(CCString* var);
//	int _nattackRangeX;
//	int _nattackRangeY;

//	private: CCString* _sattackValue1;
	public: virtual CCString* getsAttackValue1();
	public: virtual void setsAttackValue1(CCString* var);

//	protected: CCString* _sattackType1;
	public: virtual CCString* getsAttack1Type();
	public: virtual  void setsAttack1Type(CCString* var);
//	int _sattackRangeX1;
//	int _sattackRangeY1;
//	unsigned int _sattackcoldDown1;
//	bool _sattack1isDouble;
//	int _sattackCombatPoint1;

//	unsigned int _attackValue;
//	protected: CCString* _attackType;
	public: virtual CCString* getAttackType();
	public: virtual  void setAttackType(CCString* var);
//	int _attackRangeX;
//	int _attackRangeY;

//	private: CCString* _sattackValue2;
	public: virtual CCString* getsAttackValue2();
	public: virtual void setsAttackValue2(CCString* var);

//	protected: CCString* _sattackType2;
	public: virtual CCString* getsAttack2Type();
	public: virtual  void setsAttack2Type(CCString* var);
//	int _sattackRangeX2;
//	int _sattackRangeY2;
//	unsigned int _sattackcoldDown2;
//	bool _sattack2isDouble;
//	int _sattackCombatPoint2;

//	private: CCString* _sattackValue3;
	public: virtual CCString* getsAttackValue3();
	public: virtual void setsAttackValue3(CCString* var);

//	protected: CCString* _sattackType3;
	public: virtual CCString* getsAttack3Type();
	public: virtual  void setsAttack3Type(CCString* var);
//	int _sattackRangeX3;
//	int _sattackRangeY3;
//	unsigned int _sattackcoldDown3;
//	bool _sattack3isDouble;
//	int _sattackCombatPoint3;

//	private: CCString* _sattackValue4;
	public: virtual CCString* getsAttackValue4();
	public: virtual void setsAttackValue4(CCString* var);

//	protected: CCString* _sattackType4;
	public: virtual CCString* getsAttack4Type();
	public: virtual  void setsAttack4Type(CCString* var);
//	int _sattackRangeX4;
//	int _sattackRangeY4;
//	unsigned int _sattackcoldDown4;
//	bool _sattack4isDouble;
//	int _sattackCombatPoint4;

//	private: CCString* _sattackValue5;
	public: virtual CCString* getsAttackValue5();
	public: virtual void setsAttackValue5(CCString* var);

//	protected: CCString* _sattackType5;
	public: virtual CCString* getsAttack5Type();
	public: virtual  void setsAttack5Type(CCString* var);
//	int _sattackRangeX5;
//	int _sattackRangeY5;
//	unsigned int _sattackcoldDown5;
//	int _sattackCombatPoint5;


//	int enemyCombatPoint;
//	int friendCombatPoint;

//	private: CCString* _spcattackValue1;
	public: virtual CCString* getspcAttackValue1();
	public: virtual void setspcAttackValue1(CCString* var);

//	protected: CCString* _spcattackType1;
	public: virtual CCString* getspcAttack1Type();
	public: virtual  void setspcAttack1Type(CCString* var);
//	int _spcattackRangeX1;
//	int _spcattackRangeY1;
//	unsigned int _spcattackcoldDown1;

//	private: CCString* _spcattackValue2;
	public: virtual CCString* getspcAttackValue2();
	public: virtual void setspcAttackValue2(CCString* var);

//	protected: CCString* _spcattackType2;
	public: virtual CCString* getspcAttack2Type();
	public: virtual  void setspcAttack2Type(CCString* var);
//	int _spcattackRangeX2;
//	int _spcattackRangeY2;
//	unsigned int _spcattackcoldDown2;

//	private: CCString* _spcattackValue3;
	public: virtual CCString* getspcAttackValue3();
	public: virtual void setspcAttackValue3(CCString* var);

//	protected: CCString* _spcattackType3;
	public: virtual CCString* getspcAttack3Type();
	public: virtual  void setspcAttack3Type(CCString* var);
//	int _spcattackRangeX3;
//	int _spcattackRangeY3;
//	unsigned int _spcattackcoldDown3;


//	private: CCString* _tempAttackValue1;
	public: virtual CCString* gettempAttackValue1();
	public: virtual void settempAttackValue1(CCString* var);
//	int _tempcoldDown1;


//	protected: CCString* _tempAttackType;
	public: virtual CCString* getTempAttackType();
	public: virtual  void setTempAttackType(CCString* var);

//	protected: CCString* _effectType;
	public: virtual CCString* getEffectType();
	public: virtual  void setEffectType(CCString* var);
//	bool _hurtFromLeft;
//	bool _hurtFromRight;


//	protected: CCArray* _damageArray;
	public: virtual CCArray* getDamageArray();
	public: virtual  void setDamageArray(CCArray* var);

//	unsigned int damageEffectCount;
//	protected: CCArray* _monsterArray;
	public: virtual CCArray* getMonsterArray();
	public: virtual  void setMonsterArray(CCArray* var);


//	protected: CCPoint _velocity;
	public: virtual CCPoint getVelocity();
	public: virtual  void setVelocity(CCPoint var);
//	protected: CCPoint _desiredPosition;
	public: virtual CCPoint getDesiredPosition();
	public: virtual  void setDesiredPosition(CCPoint var);

//	protected: State _actionState;
	public: virtual State getActionState();
	public: virtual  void setActionState(State var);
//	protected: GameLayer* _delegate;
	public: virtual GameLayer* getDelegate();
	public: virtual  void setDelegate(GameLayer* var);


//	private: CCAction* _idleAction;
	public: virtual CCAction* getIdleAction();
	public: virtual void setIdleAction(CCAction* var);
//	private: CCAction* _nattackAction;
	public: virtual CCAction* getNAttackAction();
	public: virtual void setNAttackAction(CCAction* var);
//	private: CCAction* _walkAction;
	public: virtual CCAction* getWalkAction();
	public: virtual void setWalkAction(CCAction* var);
//	private: CCAction* _hurtAction;
	public: virtual CCAction* getHurtAction();
	public: virtual void setHurtAction(CCAction* var);
//	private: CCAction* _knockDownAction;
	public: virtual CCAction* getKnockDownAction();
	public: virtual void setKnockDownAction(CCAction* var);
//	private: CCAction* _airHurtAction;
	public: virtual CCAction* getAirHurtAction();
	public: virtual void setAirHurtAction(CCAction* var);
//	private: CCAction* _floatAction;
	public: virtual CCAction* getFloatAction();
	public: virtual void setFloatAction(CCAction* var);
//	private: CCAction* _deadAction;
	public: virtual CCAction* getDeadAction();
	public: virtual void setDeadAction(CCAction* var);


//	private: CCAction* _skill1Action;
	public: virtual CCAction* getSkill1Action();
	public: virtual void setSkill1Action(CCAction* var);
//	private: CCAction* _skill2Action;
	public: virtual CCAction* getSkill2Action();
	public: virtual void setSkill2Action(CCAction* var);
//	private: CCAction* _skill3Action;
	public: virtual CCAction* getSkill3Action();
	public: virtual void setSkill3Action(CCAction* var);
//	private: CCAction* _skill4Action;
	public: virtual CCAction* getSkill4Action();
	public: virtual void setSkill4Action(CCAction* var);
//	private: CCAction* _skill5Action;
	public: virtual CCAction* getSkill5Action();
	public: virtual void setSkill5Action(CCAction* var);


//	private: CCActionInterval* _moveAction;
	public: virtual CCActionInterval* getMoveAction();
	public: virtual void setMoveAction(CCActionInterval* var);
//	private: CCAction* _floatUPAction;
	public: virtual CCAction* getFloatUPAction();
	public: virtual void setFloatUPAction(CCAction* var);
//	private: CCActionInterval* _jumpUPAction;
	public: virtual CCActionInterval* getJumpUPAction();
	public: virtual void setJumpUPAction(CCActionInterval* var);


	void update(float dt);
	void updateHpBarPosition(float dt);
	void acceptAttack(CCObject* object);


	float getHpPercent();

	bool checkHasMovement();

	void idle();
	void walk(CCPoint direction);
	void attack(abType type);
	void sAttack(abType type);
	void nAttack();
	void oAttack(abType type);
	bool hurt();
	bool hardHurt(int delayTime, bool isHurtAction, bool isCatch, bool isStick, bool isStun);
	void absorb(CCPoint position, bool isImmediate);
	// void jump(); // No reference
	void knockDown();
	void dead();
	void floatUP(float floatHeight, bool isCancelSkill);
	void airHurt();
	void doAI();


	virtual void changeAction();
	void changeAction2();
	void changeGroup();

	void resumeAction(float dt);
	void setActionResume();
	void setActionResume2();
	void reCatched(float dt);

	void setShadow(CCNode* sender, void* data);
	void disableShadow(CCNode* sender);
	void enableShadow(CCNode* sender);

	void setItem(abType type);
	void disableEffect();
	void disableHpBar(float dt);

	void disableShack();
	void disableDebuff(float dt);

	void enableSkill1(float dt);
	void enableSkill2(float dt);
	void enableSkill3(float dt);
	void enableItem1(float dt);


	void enableGear00(float dt);
	void enableGear03(float dt);
	void enableGear06(float dt);

	void disableGear1(float dt);
	void disableGear2(float dt);
	void disableGear3(float dt);

	bool setGear(gearType type);
	void useGear(gearType type);

	void setCoinDisplay(int num);
	void addCoin(int num);
	void minusCoin(int num);

//	bool _isCanSkill1;
//	bool _isCanSkill2;
//	bool _isCanSkill3;
//	bool _isCanItem1;
//	bool _isCanOugis1;
//	bool _isCanOugis2;

//	CCArray* idleArray;
//	CCArray* walkArray;
//	CCArray* hurtArray;
//	CCArray* airHurtArray;
//	CCArray* knockDownArray;
//	CCArray* floatArray;
//	CCArray* deadArray;
//	CCArray* nattackArray;
//	CCArray* skill1Array;
//	CCArray* skill2Array;
//	CCArray* skill3Array;
//	CCArray* skill4Array;
//	CCArray* skill5Array;

//	CCArray* skillSPC1Array;
//	CCArray* skillSPC2Array;
//	CCArray* skillSPC3Array;
//	CCArray* skillSPC4Array;
//	CCArray* skillSPC5Array;


	virtual void dealloc();
	virtual void reborn(float dt);


	void resumePauseStuff(float dt);

	void lostBlood(float dt);
	void removeLostBlood(float dt);

	virtual void setAI(float dt);
	void setSkillEffect(CCNode* sender, void* data);
	void setRestore2(float dt);


// protected:
// 	void readDate(CCArray* tmpDate, CCString* &attackType, CCString* &attackValue, int &attackRangeX, int &attackRangeY, unsigned int &coldDown, int &combatPoint);

// 	CCAction* createAnimation(CCArray* ationArray, float fps, bool isRepeat, bool isReturn);

// ////	CCDictionary* callValue;

// 	void setSound(CCNode* sender, void* data);
// 	void setDSound(CCNode* sender, void* data);
// 	void setMove(CCNode* sender, void* data);
// 	void setCharge(CCNode* sender, void* data);
// 	void setChargeB(CCNode* sender, void* data);
// 	void getCollider();
// 	void getSticker(float dt);
// 	void stopMove(float dt);
// 	void stopJump(CCNode* sender, void* data);
// 	void setAttackBox(CCNode* sender, void* data);
// 	void setDamage(CCString* effectType, unsigned int attackValue, bool isFlipped);
// 	void setDamgeDisplay(unsigned int value, const char* type);

// 	void setItemEffect(CCNode* sender, void* data);
// 	void setDamgeEffect(CCString* type);
// 	void setMonAttack(CCNode* sender, void* data);
// 	void setTransform();
// 	void setOugis(CCNode* sender);

// 	void setCharFlip();


// 	void setClone(CCNode* sender, void* data);
// 	void setMon(CCNode* sender, void* data);
// 	void setMonPer(float dt);
// 	void setBullet(CCNode* sender, void* data);
// 	void setBulletGroup(float dt);

// 	void setTrap(CCNode* sender, void* data);


// 	void setBuff(CCNode* sender, void* data);
// 	void setCommand(CCNode* sender, void* data);
// 	void setBuffEffect(const char* type);
// 	void removeBuffEffect(const char* type);
// 	void disableBuff(float dt);
// 	void healBuff(float dt);
// 	void dehealBuff(float dt);

// 	void removeClone(float dt);
// 	void removeSelf(float dt);
// 	void setJump(CCNode* sender, void* data);


// 	void removeCoinDisplay(CCNode* sender, void* data);

// 	CCRect setHalfBox();
// 	CCRect setHitBox();

// 	void checkActionFinish(float dt);

// 	void setRestore(float dt);


// 	bool findEnemy(const char* type, int searchRange, bool masterRange = false);
// 	bool findEnemy2(const char* type);
// 	bool findTargetEnemy(const char* type, bool isTowerDected);
// 	bool checkBase();

// 	bool stepBack();
// 	bool stepBack2();
// 	bool checkRetri();
// 	void stepOn();
// 	void changeSide(CCPoint sp);


// 	void removeDamageDisplay();

// 	void onEnter();
// 	void onExit();

// private:
// //	bool _affectedByTower;
};

/* Element.h */
class HeroElement : public CharacterBase {
public:
	HeroElement();
	~HeroElement();

	bool	init();
	void	initAction();
	void	setHPbar();
	void	setShadows();
	void    changeHPbar();
// 	void	neicun(float dt);
	virtual void setID(CCString* character, CCString* role, CCString *group);
	virtual void setAI(float dt);

	// CCSprite* 		rebornSprite;
	// CCLabelBMFont* 	rebornLabel;
	void	reborn(float dt);
	void	dealloc();

// protected:
	// void	countDown(float dt);
};

class Flog: public CharacterBase{
public:
	Flog();
	~Flog();

	static Flog* create();

	bool init();
	void initAction();
	void setHPbar();

//	float _mainPosY;
//	float _randomPosX;
//	float _randomPosY;

	void setID(CCString* character, CCString* role, CCString *group);

// protected:
// 	void dealloc();
// 	void setAI(float dt);
};

class Tower: public CharacterBase{
public:
	Tower();
	~Tower();

	static Tower* create();

	bool init();
	void initAction();
	void setHPbar();
	void dealloc();
	void setID(CCString* character, CCString* role, CCString *group);
};

class Monster: public CharacterBase{
public:
	Monster();
	~Monster();

 	static Monster* create();

	bool init();
	void initAction();
	void setID(CCString* character, CCString* role, CCString *group);
	void setHPbar();
	void changeHPbar();
	void setDirectMove(unsigned int length, float delay, bool isReverse);
	void setEaseIn(unsigned int length, float delay);
	void setDirectMoveBy(unsigned int length, float delay);

// protected:
// 	void dealloc();
// 	void dealloc2();
// 	void setAI(float dt);
// 	void setResume();
};

class Bullet: public CharacterBase{
public:
	Bullet();
	~Bullet();

	static Bullet* create();

	bool init();
	void initAction();
	void setID(CCString* character, CCString* role, CCString *group);

	void setMove(unsigned int length, float delay, bool isReverse);
	void setEaseIn(unsigned int length, float delay);

	void setAttack(float dt);

// protected:
// 	void dealloc();
// 	void dealloc2();
};

/* Characters.h */
class Hero : public HeroElement{
// private:
    // virtual void perform();

public:
	bool init();

	virtual void setAI(float dt);
	void setID(CCString *character, CCString *role, CCString *group);
};

/* __AI__.hpp */
class AIProvider
{
    static HeroElement* createAI(CCString *character, CCString *role, CCString *group);
}

/* ------- UI Layer ------- */


/* GameScene.h */
class GameScene : public CCScene
{
    static CCScene *create();
};

/* Effect.h */
class Effect : public CCSprite{
public:
	Effect();
	~Effect();

	virtual bool init(const char *szImage, CCObject* Attacker);

	static Effect* create(const char *szImage, CCObject* Attacker);

//	CharacterBase* at;

// private:
// 	void removeEffect();
// 	void removeFontEffect();
// 	CCAction* createEffectAnimation(const char* file, int frameCount, float fps, bool isRepeat);
// 	CCAction* createFontAnimation();
};

/* HPBar.h */
class HPBar : public CCSprite{
	// HPBar();
	// ~HPBar();
public:
	static HPBar *create(const char *szImage);

//	protected: CharacterBase * _delegate;public: virtual CharacterBase * getDelegate();
	// virtual bool init(const char *szImage);
	// void changeBar(const char *szImage);
	// void loseHP(float percent);
//	private: CCSprite * hpBottom;
	public: virtual CCSprite* getHPBottom();
//	private: CCSprite * hpBar;
	public: virtual CCSprite* getHPBAR();
};

/* LoadLayer.h */
class LoadLayer : public CCLayer{
public:
	LoadLayer();
	~LoadLayer();

//	CCArray* tempHeros;
	bool init();

//	int loadNum;

	static LoadLayer* create();

//	private: GameLayer* _gameLayer;
	public: virtual GameLayer* getGameLayer();
	public: virtual void setGameLayer(GameLayer* var);
//	private: BGLayer* _bgLayer;
	public: virtual BGLayer* getBGLayer();
	public: virtual void setBGLayer(BGLayer* var);
//	private: HudLayer* _hudLayer;
	public: virtual HudLayer* getHudLayer();
	public: virtual void setHudLayer(HudLayer* var);
//	bool _isHardCoreMode;
//	bool _isRandomChar;

	void preloadAudio();
	void preloadIMG();
	void playBGM(float dt);
	void onLoadFinish(float dt);

	// bool isPosting;
	// void onHttpRequestCompleted(CCHttpClient* client, CCHttpResponse* response);

	// CCArray* DLCArray;
// private:
	// 	void preloadPlist(CCObject* obj);

// protected:
//	void onEnter();
//	void onExit();
};

/* some_header.h */
/* some_header.h */
/* some_header.h */
/* some_header.h */
/* some_header.h */
/* some_header.h */

/* KTools.h */
class KTools : public CCObject{
public:
	static bool readXMLToArray(const char *filePath, CCArray *array);
	static void prepareFileOGG(const char *listName, bool unload = false);
};

/* CCTips.h */
class CCTips : public CCSprite{
public:
	static CCTips *create(const char *tips);
};
